#include <stdio.h>
#include <stdlib.h>     // exit函数的头文件
#include <string.h>
#include <unistd.h>     // bind listen的头文件
#include <time.h>       // time(NULL)，ctime(&ticks)获取系统时间的头文件
#include <netinet/in.h>
#include <arpa/inet.h>  // 必须包含，用于inet_ntop

#define PORT 8000     //使用特定的端口
#define MAXMEM 10    //规定特定的最大连接用户数目
#define BUFFSIZE 128	//设置最大

int listenfd, connfd[MAXMEM];
struct client{int pthid;char name[10];};   //结构体定义完成
struct client client[10];                      //定义一个数组结构体变量，大小为10

void quit();     //声明quit函数
void rcv_snd(int p);   //声明snd函数


int main(){       struct sockaddr_in serv_addr, cli_addr;    //定义一个服务器端，一个客户端
        int i;time_t ticks;             //定义一个常量i方便以后使用for循环
        pthread_t thread;           //定义一个线程id常量
        char buff[BUFFSIZE];         //定义一个字符数组用来存储数据

        printf("running...\n(Prompt: enter command ""quit"" to exit server)\n");   //服务器端的提示信息
        bzero(&serv_addr, sizeof(struct sockaddr_in));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(PORT);
        serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);     //  初始化serv_addr

        listenfd = socket(AF_INET, SOCK_STREAM, 0);
        if(listenfd < 0){perror("fail to socket");exit(-1);}
        int opt=SO_REUSEADDR;
        setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt));   //监听套接字

        if(bind(listenfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0){perror("fail to bind");exit(-2);}
        listen(listenfd, MAXMEM);//  规定最大的监听数

        pthread_create(&thread, NULL, (void *)(quit), NULL);       //创建一个线程，对服务器程序进行管理 
        for(i=0; i<MAXMEM; i++)connfd[i] = -1;   // 将套接字描述符数组初始化为-1，表示空闲
        while(1){
                int len;
                for(i=0; i<MAXMEM; i++){if(connfd[i] == -1)break;}    //找到未使用的最小的i值
                connfd[i] = accept(listenfd, (struct sockaddr *)&cli_addr, &len);        // accept 从listen接受的连接队列中取得一个连接
	client[i].pthid = connfd[i];         			//在特定的线程内给结构体中的pthid赋值
                if(connfd[i] < 0){perror("fail to accept");}// 此句可以不用，accept会阻塞等待

                ticks = time(NULL);
                printf("%.24s\n\tconnect from: %s, port %d\n",
                                ctime(&ticks), inet_ntop(AF_INET, &(cli_addr.sin_addr), buff, BUFFSIZE),
                                ntohs(cli_addr.sin_port));      // inet_ntop的使用以及调用时间函数的使用
                pthread_create(malloc(sizeof(pthread_t)), NULL, (void *)(&rcv_snd), (void *)i);       //针对当前套接字创建一个线程，对当前套接字的消息进行处理
        }     //while函数结束
        return 0;
}      //main函数结束

void quit(){    //设置quit函数
	int choose,pid,i;
        	char msg[10];
	while(1){
		printf("Hi!欢迎进入群组聊天室管理台\n\n");
		printf("请输入您想实现的功能\n");               //实现服务器的菜单选项，服务器选择功能模块
		printf("1.显示在线客户端\n");
		printf("2.踢出指定客户端\n");
		printf("3.关闭服务器\n");
		printf("聊天管理台启动成功，等待用户进入聊天室......\n");
		scanf("%d",&choose);
		switch(choose){
			case 1:     for(i=0;i<MAXMEM;i++)
					if(connfd[i] != -1)
						printf("%d\t",connfd[i]);
								printf("\n");
									break;
			case 2:     printf("请输入指定客户端的套接字");
				scanf("%d",&pid);     //获取想踢出客户端的pid
				for(i=0;i<MAXMEM;i++){
						if(connfd[i]==pid)
						{shutdown(pid,SHUT_RDWR);connfd[i] = -1;}   //if语句结束
						       }    //for循环结束
				break;     //case结束
			case 3:	printf("请输入quit\n");
				scanf("%s", msg);            // scanf 不同于fgets, 它不会读入最后输入的换行符
                		if(strcmp(msg, "quit") == 0){printf("Byebye... \n");close(listenfd);exit(0);}   //if语句结束
				break;    //case结束
				}      //switch语句结束
	}   //while循环结束
}    //quit函数定义结束

void rcv_snd(int n){
        		int len, i,j;int ret,pid;
        		char name[32], mytime[32], buf[BUFFSIZE];
        		time_t ticks;
        		write(connfd[n], "your name: ", strlen("your name: "));   // 获取此线程对应的套接字用户的名字
       		len = read(connfd[n], name, 32);
       	if(len > 0)
       		name[len-1] = '\0';     // 去除换行符
	for(i=0;i<10;i++){
		if(!strcmp(client[i].name,name)){
		write(connfd[n], "sorry 因用户名已被注册已自动退出 请尝试重新注册", strlen("sorry 因用户名已被注册已自动退出 请尝试重新注册"));    
										//进行用户名之间的对比，若重复则会退出后进入的客户端
			shutdown(connfd[n],SHUT_RDWR);
                    		connfd[n] = -1;}  //if语句结束
			}   //for循环结束
	strcpy(client[n].name,name);
	strcpy(buf, name);
	strcat(buf, "\t进入了群聊...\n\0");
	pid=connfd[n];// 把当前用户的加入 告知所有用户
for(i=0; i<MAXMEM; i++){
                		if(connfd[i] != -1)
			write(connfd[i], buf, strlen(buf));
       			 }     //for循环结束

        		while(1){
                	char temp[BUFFSIZE];
                	if((len=read(connfd[n], temp, BUFFSIZE)) > 0){
                        					 	temp[len-1] = '\0';   // 当用户输入bye时，当前用户退出
                        
if(strcmp(temp,"show")==0){
						for(i=0;i<MAXMEM;i++)
						if(connfd[i] != -1){
						char chuan;
						chuan=connfd[i]+'0';
						write(connfd[n], &chuan, sizeof(chuan));
						}   //for循环完成
						}   //if完成
if(strcmp(temp, "bye") == 0){
					printf("%s 下线了...\n",name);
                                			close(connfd[n]);
                                			connfd[n] = -1;
                                			pthread_exit(&ret);}
                        ticks = time(NULL);
                        sprintf(mytime, "%.24s\r\n", ctime(&ticks));
                        strcpy(buf, name);
                        strcat(buf, "\t");
                        strcat(buf, mytime);
                        strcat(buf, "\r\t");
                        strcat(buf, temp);
			strcat(buf, "\n");
if(!strncmp(temp,"all",3))
			{
			for(i=0; i<MAXMEM; i++)
                       			{
                         	   	   	if(connfd[i] != -1)
                           		            	write(connfd[i], buf, strlen(buf));
                       			}
			}
if(strncmp(temp,"to",2)==0)
			{
				for(i=0;i<10;i++)
				{	char p[5] = "to" ;
					strcat(p,client[i].name);
					if(strncmp(p,temp,5)==0)
					{write(connfd[i], buf, strlen(buf));}
				}
			}
                }
        }
}
