#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<arpa/inet.h>
#include<ctype.h>
#define SERV_PORT 6666
int main(){
	int i,j,n,maxi; 
	int nready,client[FD_SETSIZE];// FD_SETSIZE是默认在操作系统中定义的宏，描述着当前最大能够使用的文件描述符的上限值，默认为1024；自定义数组client，防止遍历1-1024个文件描述符。
	int maxfd,listenfd,connfd,sockfd;
	char buf[BUFSIZ],str[INET_ADDRSTRLEN];// #define INET_ADDRSTRLEN 16，Linux内核内嵌的宏，代表所使用的地址的长度
	struct sockaddr_in clie_addr,serv_addr;
	socklen_t clie_addr_len;
	fd_set rset,allset;// rset读事件文件描述符集合，select函数返回后会把之前监听的集合进行修改，allset用来暂存原来的样子




	listenfd=socket(AF_INET,SOCK_STREAM,0);
       	bzero(&serv_addr,sizeof(serv_addr));
	serv_addr.sin_family=AF_INET;
	serv_addr.sin_addr.s_addr=htonl(INADDR_ANY);
	serv_addr.sin_port=htons(SERV_PORT);
	bind(listenfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr));
	listen(listenfd,20);   //创建监听套接字并bind到ser.addr上，并设置listen的最大队列为20



	maxfd=listenfd; // 即为最大文件描述符，最初为3
	maxi=-1; // maxi将来用作client的下标，初始值指向第0个元素之前下标位置
	for(i=0;i<FD_SETSIZE;i++)//循环执行1024次，用-1初始化client[]
	client[i]=-1;
	FD_ZERO(&allset);// 将allset清空
	FD_SET(listenfd,&allset);//构造select监控文件描述符集，把listenfd加到allset中
	




while(1){
	rset=allset;// 每次循环时都重新设置select监控信号集，将allset赋值给rset，起初读事件集合里只有listenfd
		nready=select(maxfd+1,&rset,NULL,NULL,NULL);// 写事件和异常事件我不关心，所以都传NULL，最后一个参数是时间，如果传NULL表示永久等待，一直等到满足了监听事件才返回。返回值被nready接收，监听集合中满足事件的总数。至少有一个事件被监听到，select函数才会返回。
	if(nready<0)
		perr_exit("select error");


	if(FD_ISSET(listenfd,&rset)){  //判断listenfd是否在读事件集合中，之前调用了select函数监听，当它有返回回来，说明一定有新的客户端连接请求，客户端连接成功会返回一个新的文件描述符。这个大if判断是否有客户端连接，并且把新生成的文件描述符加入到集合中。
	clie_addr_len=sizeof(clie_addr);
	connfd=accept(listenfd,(struct sockaddr *)&clie_addr,&clie_addr_len);// 调用Accept和客户端进行连接，这时Accept不会阻塞，直接建立连接成功，返回了一个新的文件描述符。一定是有这件事发生了才去调用Accept，而早期是先调用Accept在那里等着这件事发生。
	printf("recieved from %s at PORT %d\n",inet_ntop(AF_INET,&clie_addr.sin_addr,str,sizeof(str)),ntohs(clie_addr.sin_port));// 打印客户端的IP地址和端口号
 
	for(i=0;i<FD_SETSIZE;i++) //找到client[]中任意一个值为-1 的没有使用的空位置
	if(client[i]<0){
		client[i]=connfd;// 保存Accept返回的文件描述符到自定义数组client[]中，以避免将来在找哪个文件描述符事件满足的时候遍历1-1024个文件描述符。
		break;	}
	FD_SET(connfd,&allset);// 向监控文件描述符集合allset添加新的文件描述符connfd，allset中目前有listenfd和connfd。
	if(connfd>maxfd) // Select第一个参数需要
		maxfd=connfd;
	if(i>maxi) // 保证maxi存的总是client[]最后一个元素下标，目前指向第0个元素（connfd所存放的位置）
		maxi=i;
		if(--nready==0)
			continue;
		}
	for(i=0;i<=maxi;i++){//检测哪个clients有数据就绪
	if((sockfd=client[i])<0)
		continue;
	if(FD_ISSET(sockfd,&rset)){// 有读事件才会在这个集合当中，最初不在，所以这个if不满足
	
	if((n=read(sockfd,buf,sizeof(buf)))==0){// 这时的read函数也不会阻塞，因为同样一定是有读件事发生了才去调用Read函数去读。其实数据已经写到套接字了，只需要去套接字中拿出来就可以。
	close(sockfd);// 当读到的数据是0，有可能client关闭连接，服务器端也关闭对应连接
	FD_CLR(sockfd,&allset);// 解除select对此文件描述符的监控，把监听的文件描述符从总集合中清除出去
	client[i]=-1;// 自定义的数组的值清为-1




	}else if(n>0){
	for(j=0;j<n;j++)
		buf[j]=toupper(buf[j]);
	sleep(10);// 为了放大现象，可以没有
	write(sockfd,buf,n);	}
	if(--nready==0)
	break;// 跳出for，但还在while中
	}
	}
	}
	close(listenfd);
	return 0;
	}